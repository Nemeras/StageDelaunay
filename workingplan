~~~ Premiere partie du travail ~~~

	J'ai changé le predicat d'orientation : je ne considere que des
	triangles orientes, et le resultat de vertices_to_triangle est
	dit correct si les 3 points donnés sont orientés

/!\	Apres reflexion, une ou plusieurs hypothese(s) sont prouvable
	en utilisant les predicats d'orientation, je dois reverifier ca


	j'ai changé la definition de triangulation : rajoute edt et tne
	pour la raison dont on en avait disucté, et parce que je me suis
	rendu compte d'une inconsistence.
	
	J'ai enleve edt car il etait totalement inutile: en plus de ce
	qu'on a discuté, je me suis rendu compte que le lemme qui me 
	permettait de le remplacer etait dans tous les cas deja utilise
	ailleurs.... Donc voila !

	Ajout d'une nouvelle hypothese pour triangulation: tout triangle
	de la triangulation est oriente.

Prouver que split triangle conserve triangulation : OK !!!
	prouver que split triangle conserve covers_hull : OK
		Besoin de hull_add_point : OK
		Interessant de rajouter un lemme disant qu'un point dans un 
		triangle
		 est un barycentre des trois points ? : OK
	Prouver que split triangle conserve covers_vertices : OK
	Prouver que split triangle conserve no_cover_intersection : OK
	Prouver que split_triangle conserve no_point_on_segment : OK
		Ajout de lemmes/hypotheses sur les orientations

	Prouver que split_triangle conserve tne : OK

	Prouver que split_triangle conserve or : OK

/!\ 	Reverifier mes hypotheses.

Prouver que flip edge conserve triangulation
     -   Changer la definition pour une definition ensembliste !
	A part si j'ai des problemes avec ma definition de flip_edge,
	cela devrait marcher quasiment directement, je pense.
	J'ai ecris le début des preuves, ça a l'air de bien marcher...

	J'ai rechange la definition de flip_edge apres reflexion, pour
	eviter d'avoir des problemes avec la definition ensembliste.

	prouver tr3v : TODO

	prouver covers hull : OK
		Premier lemme : montrer que si un point est dans un des
		triangles d'entree pour split edge alors il est dans un
		triangle de sortie : OK
	prouver covers_vertices : OK
	
	prouver NCI: OK
	
	prouver NPS: OK

	prouver TNE: OK		 
	
	prouver OR : OK

~~~ Deuxieme partie du travail ~~~
	
	Faire l'implementation (determinant, etc...) et prouver les hypotheses. 

	en cours :  verifier ce qui est reutilisable chez Wassim pour les preuves
	non triviales sur les determinants notamment ?

	Hypotheses prouvees:
	vertices_to_triangle_correct : OK
	vertices_to_edge_correct : OK
	vertices_too_edge_sym : OK
	oriented_surface_x_x : OK
	vertices_to_triangle_oriented : OK
	oriented_surface_change1 : OK
 	oriented_surface_circular : OK
	edges_set_vertices_to_triangle : OK
	vertices_to_triangle_correct2 : OK
	vertex_set_edge_triangle : OK


 


	Hypotheses restantes (Knuth et ci) :
	is_on_line_trans :
	is_left_of_trans :
	is_left_or_line_trans :
	is_left_of_trans2 :
	is_left_or_line_trans2 :
	axiom4_knuth :

	Autres Hypotheses restantes :
	on_edge_split_triangle : 
	surface_non_empty :
	on_line_on_edge :
	on_edge_on_line : 
	vert_not_on_edges :	
	in_triangle_on_edge :
	in_triangle_barycentre :
	vertex_set_vertices_to_triangle :
	vertex_set_eq_in_triangle :
	vertex_set_eq_in_triangle_w_edges :
	intersection_of_lines :
	vertices_to_edge_in_edges_set:
	all_triangle_oriented:
	

~~~ Troisieme partie du travail ~~~

	Ecrire l'algorithme qui transforme en triangulation de Delaunay. 
		La preuve qu'il cree bien une triangulation de Delaunay 
		devrait etre simple, le probleme est de prouver qu'il 
		termine, normalement ?


